myOrderForLevels2 <- rownames(newPossCob)[hr2$order]
myOrderForLevels2 <- myOrderForLevels2[myOrderForLevels2 %in% as.vector(temp2[,1])]
temp2$Geneset <- factor(temp2$Geneset, levels = myOrderForLevels2)
cat("dsd2")
plotTest2 <- ggplot(data = temp2, aes(y=Geneset,x=Comparison,
size=-log10(All_Pvalue), colour=(log2(Down_Odds)-log2(Up_Odds)))) +geom_point(alpha=0.7) + scale_color_gradient2(low="green",high="red",mid="black",midpoint=0)+theme(axis.text.x=element_text(angle=90),panel.background=element_rect(fill="White"),panel.grid.major.y=element_line(colour="Black"))+scale_size_continuous(range=c(1,12))
cat("dsd3")
}else{
plotTest2 <- NULL
plotTest <- NULL
}
if(plot==T){
print(plotTest2)
print(plotTest)
cat("dsd4")
ggsave(plot=plotTest,filename=paste0(prefix,"EnrichmentBubble.pdf",collapse="_"),device="pdf",height = height,width = width,units = units)
ggsave(plot=plotTest2,filename=paste0(prefix,"Clustered_EnrichmentBubble.pdf",collapse="_"),device="pdf",height = height,width = width,units = units)
}
return(c(myBigTables,list(temp1,temp2,plotTest,plotTest2)))
}
TBs <- list(TDP69Th_Vs_TDPsmTh, T4int8ThVs_TDP69Th, T4SP69vsT4int8Th, T8SP69vsT4int8Th, T4int8Th_Vs_TDPsmTh, T4SP69_Vs_TDPsmTh, T8SP69_Vs_TDPsmTh, T4SP69_Vs_TDP69Th, T8SP69_Vs_TDP69Th)
names(TBs) <- c("TDP69Th_Vs_TDPsmTh","T4int8ThVs_TDP69Th","T4SP69vsT4int8Th","T8SP69vsT4int8Th","T4int8Th_Vs_TDPsmTh","T4SP69_Vs_TDPsmTh","T8SP69_Vs_TDPsmTh","T4SP69_Vs_TDP69Th","T8SP69_Vs_TDP69Th")
#write.table(resAllll,file="~/Desktop/TcellMirna/summarisedMiRNA.csv",sep=",",row.names=F,quote=F)
colOrder <- c("TDP69Th_Vs_TDPsmTh","T4int8ThVs_TDP69Th","T4SP69vsT4int8Th","T8SP69vsT4int8Th",
"T4int8Th_Vs_TDPsmTh","T4SP69_Vs_TDPsmTh","T8SP69_Vs_TDPsmTh",
"T4SP69_Vs_TDP69Th","T8SP69_Vs_TDP69Th")
load("~/Downloads/tcell_miRNA/AllmiRNAGroups.RData")
resAllllWCS100 <- makeHyperBubble(TBs, 0.05, 0,
tempMIRT100Weight, setCutOff=0.01, Setpadjust=FALSE,
idColumn=0, tablePvalueColumn="P.Value", tableLogFCColumn="logFC",
writePerComparisonFile=TRUE, addGenesToComparisonFile=F, prefix="Ordered_Top100ByWeightedContextScore_001", minForSet=10, colOrder = colOrder)
TBs
resAllllmiRNA <- makeHyperBubble(TBs, 0.05, 0,
miRNAtoList, setCutOff=0.05, Setpadjust=FALSE,
idColumn=0, tablePvalueColumn="P.Value", tableLogFCColumn="logFC",
writePerComparisonFile=TRUE, addGenesToComparisonFile=F, prefix="Ordered_Bioconductor_Set_005", minForSet=10, colOrder = colOrder)
resAllllCSAll <- makeHyperBubble(TBs, 0.01, 0,
tempMIRTAll, setCutOff=0.05, Setpadjust=FALSE,
idColumn=0, tablePvalueColumn="P.Value", tableLogFCColumn="logFC",
writePerComparisonFile=TRUE, addGenesToComparisonFile=F, prefix="Ordered_AllContextScore_001", minForSet=10, colOrder = colOrder)
resAllllCSAll <- makeHyperBubble(TBs, 0.01, 0,
tempMIRT50Weight, setCutOff=0.05, Setpadjust=FALSE,
idColumn=0, tablePvalueColumn="P.Value", tableLogFCColumn="logFC",
writePerComparisonFile=TRUE, addGenesToComparisonFile=F, prefix="Ordered_AllContextScore_001", minForSet=10, colOrder = colOrder,print=F)
resAllllCSAll <- makeHyperBubble(TBs, 0.01, 0,
tempMIRT50Weight, setCutOff=0.05, Setpadjust=FALSE,
idColumn=0, tablePvalueColumn="P.Value", tableLogFCColumn="logFC",
writePerComparisonFile=TRUE, addGenesToComparisonFile=F, prefix="Ordered_AllContextScore_001", minForSet=10, colOrder = colOrder)
tempMIRT50
tempMIRT50Weight
resAllllCSAll <- makeHyperBubble(TBs, 0.01, 0,
tempMIRT50, setCutOff=0.05, Setpadjust=FALSE,
idColumn=0, tablePvalueColumn="P.Value", tableLogFCColumn="logFC",
writePerComparisonFile=TRUE, addGenesToComparisonFile=F, prefix="Ordered_AllContextScore_001", minForSet=10, colOrder = colOrder,print=F)
resAllllCSAll <- makeHyperBubble(TBs, 0.01, 0,
tempMIRT50, setCutOff=0.05, Setpadjust=FALSE,
idColumn=0, tablePvalueColumn="P.Value", tableLogFCColumn="logFC",
writePerComparisonFile=TRUE, addGenesToComparisonFile=F, prefix="Ordered_AllContextScore_001", minForSet=10, colOrder = colOrder,plot = F)
resAllllCSAll <- makeHyperBubble(TBs, 0.01, 0,
tempMIRT50, setCutOff=0.05, Setpadjust=FALSE,
idColumn=0, tablePvalueColumn="P.Value", tableLogFCColumn="logFC",
writePerComparisonFile=TRUE, addGenesToComparisonFile=F, prefix="Ordered_AllContextScore_001", minForSet=10, colOrder = colOrder,plot = T)
ggplot(faithfuld, aes(waiting, eruptions)) +
geom_raster(aes(fill = density))
---
)
faithfuld
ggplot(faithfuld, aes(waiting, eruptions)) +
geom_raster(aes(fill = density))
library("edgeR")
library("DESeq2")
countsFiles <- dir("/Users/tcarroll/Downloads//Esmerelda/rsubread/",full.names=T)
do.call(cbind,list(countsFiles))
ans <- list()
rownamesToBe <- read.delim(countsFiles[1],sep="\t",h=F)[,1]
for(i in 1:length(countsFiles)){
ans[[i]] <- read.delim(countsFiles[i],sep="\t",h=F)[,2]
}
fullCounts <- do.call(cbind,ans)
rownames(fullCounts) <- rownamesToBe
colnames(fullCounts) <- gsub("\\.Counts","",basename(countsFiles))
# ttte <- mget(rownames(fullCounts),org.Dm.egFLYBASE2EG,ifnotfound = NA)
# names(ttte) <- paste0(names(ttte),"_")
# annot <- cbind(names(unlist(ttte)),unname(unlist(ttte)))
# annot[,]
# mmm <- read.delim("~/Desktop/Holly/mart_export_flybase.txt",sep="\t")
# mmm <- mmm[mmm[,2] != "",]
# groups <- c("RAS_SRC_1","RAS_SRC_2","RAS_SRC_YKI")
#
sexStatus <- c(rep("Male",9),rep("Female",12),rep("Male",3))
diet <- c("LSD","HPD","HFD","LSD","HPD","HFD","LSD","HPD","HFD",
"LSD","HPD","HFD","LSD","HPD","HFD","LSD","HPD","HFD",
"HSD","HSD","HSD","HSD","HSD","HSD"
)
date <- c(rep(c(rep("3rd",3),rep("4th",3),rep("5th",3)),2),rep(c("3rd","4th","5th"),2))
colData <- data.frame(SampleName=colnames(fullCounts),Sex=sexStatus,Diet=diet,Date=date)
dds <- DESeqDataSetFromMatrix(countData = fullCounts,
colData = colData,
design = ~ Sex+Diet+Sex*Diet)
dds <- DESeq(dds)
rlogged <- rlog(dds)
plotPCA(rlogged,intgroup="Sex")
plotPCA(rlogged,intgroup="Diet")
plotPCA(rlogged,intgroup="Date")
colData
colnames(fullCounts)
dir.create("/Users/tcarroll//Downloads/bigchip/FQs/")
dir.create("/Users/tcarroll//Downloads/bigchip/FQs/")
library(BiocParallel)
newAnalysis <- read.delim("~/Downloads/bigchip/SampleSheet_TFBS_28_NoFilter.csv",sep=",",stringsAsFactors = F)
fastq <- newAnalysis$FQLocation[1:8]
#fastq <- paste0("/Users/tcarroll//Downloads/bigchip/FQs/",basename(test))
#BiocParallel::register(BiocParallel::SerialParam())
res_Download <- bplapply(fastq,function(x) if(!file.exists(paste0("/Users/tcarroll//Downloads/bigchip/FQs/",basename(x)))){download.file(x,paste0("/Users/tcarroll//Downloads/bigchip/FQs/",basename(x)))})
#BiocParallel::register(BiocParallel::SerialParam())
res_Download <- lapply(fastq,function(x) if(!file.exists(paste0("/Users/tcarroll//Downloads/bigchip/FQs/",basename(x)))){download.file(x,paste0("/Users/tcarroll//Downloads/bigchip/FQs/",basename(x)))})
#BiocParallel::register(BiocParallel::SerialParam())
res_Download <- lapply(fastq,function(x) if(!file.exists(paste0("/Users/tcarroll//Downloads/bigchip/FQs/",basename(x)))){download.file(x,paste0("/Users/tcarroll//Downloads/bigchip/FQs/",basename(x)))})
bams <- dir("~/Downloads/bigchip/bams/")
bams <- dir("~/Downloads/bigchip/bams/",full.names = T)
bams <- gsub("\\.bam","",dir("~/Downloads/bigchip/bams/",full.names = T))
bams
bams <- gsub("\\.bam","",dir("~/Downloads/bigchip/bams/",full.names = T,pattern = "^bam"))
bams
bams <- gsub("\\.bam","",dir("~/Downloads/bigchip/bams/",full.names = T,pattern = "$bam"))
bams
bams <- gsub("\\.bam","",dir("~/Downloads/bigchip/bams/",full.names = T,pattern = "bam$"))
bams
bams <- gsub("\\.bam","",dir("~/Downloads/bigchip/bams/",full.names = T,pattern = "bam$"))
res_Align <- bplapply(localFQs,function(x)alignAndSort(x,index,"/Users/tcarroll/Downloads/bigchip/bams/",))
BiocParallel::register(BiocParallel::SerialParam())
res_Align <- bplapply(bams,function(x)alignAndSort(x,index,"/Users/tcarroll/Downloads/bigchip/bams/",))
library(Rsubread)
library(Rsamtools)
library(GenomicAlignments)
humanIndex = "/Users/tcarroll/Downloads/bigchip/Reference/referenceData/hg19_Ref/hg19"
mouseIndex = "/Users/tcarroll/Downloads/bigchip/Reference/referenceData/mm9_Ref/mm9_index"
#buildindex(basename = "/Users/tcarroll/Downloads/bigchip/Reference/hg19",reference = humanFasta,memory = 20000)
localFQs <- paste0("/Users/tcarroll//Downloads/bigchip/FQs/",basename(fastq))
BiocParallel::register(BiocParallel::MulticoreParam(workers = 4))
alignAndSort <- function(x,index,bamPath,nTH=4){
if(!file.exists(file.path(bamPath,x))){
align(index,x,output_file = file.path(bamPath,paste0(basename(x),"\\.bam")),
nthreads=nTH,
unique=F,
type=1,
complexIndels=FALSE,
phredOffset=33)
}
if(!file.exists(file.path(bamPath,paste0("Sorted_",basename(x),"\\.bam")))){
sortBam(file=file.path(bamPath,x),
destination = file.path(bamPath,paste0("Sorted_",basename(x),"\\.bam")))
}
if(!file.exists(file.path(bamPath,paste0("Sorted_",basename(x),"\\.bai")))){
indexBam(x)
}
}
res_Align <- bplapply(bams,function(x)alignAndSort(x,index,"/Users/tcarroll/Downloads/bigchip/bams/",))
alignAndSort <- function(x,index,bamPath,nTH=4){
if(!file.exists(file.path(bamPath,paste0(basename(x),"\\.bam"))){
align(index,x,output_file = file.path(bamPath,paste0(basename(x),"\\.bam")),
nthreads=nTH,
unique=F,
type=1,
complexIndels=FALSE,
phredOffset=33)
}
if(!file.exists(file.path(bamPath,paste0("Sorted_",basename(x),"\\.bam")))){
sortBam(file=file.path(bamPath,x),
destination = file.path(bamPath,paste0("Sorted_",basename(x),"\\.bam")))
}
if(!file.exists(file.path(bamPath,paste0("Sorted_",basename(x),"\\.bai")))){
indexBam(x)
}
}
index = humanIndex
bamOut <- file.path("/Users/tcarroll/Downloads/bigchip/bams/",gsub("\\.fastq\\.gz$","\\.bam",basename(fastq)))
lignAndSort <- function(x,index,bamPath,nTH=4){
if(!file.exists(file.path(bamPath,paste0(basename(x),"\\.bam")))){
align(index,x,output_file = file.path(bamPath,paste0(basename(x),"\\.bam")),
nthreads=nTH,
unique=F,
type=1,
complexIndels=FALSE,
phredOffset=33)
}
if(!file.exists(file.path(bamPath,paste0("Sorted_",basename(x),"\\.bam")))){
sortBam(file=file.path(bamPath,x),
destination = file.path(bamPath,paste0("Sorted_",basename(x),"\\.bam")))
}
if(!file.exists(file.path(bamPath,paste0("Sorted_",basename(x),"\\.bai")))){
indexBam(x)
}
}
res_Align <- bplapply(bams,function(x)alignAndSort(x,index,"/Users/tcarroll/Downloads/bigchip/bams/",))
bams
file.exists(file.path(bamPath,paste0(basename(x),"\\.bam")))
res_Align <- bplapply(bams,function(x)alignAndSort(x,index,"/Users/tcarroll/Downloads/bigchip/bams//"))
bams
bamPath <- "/Users/tcarroll/Downloads/bigchip/bams//"
file.exists(file.path(bamPath,paste0(basename(x),"\\.bam")))
file.exists(file.path(bamPath,paste0(basename(bams[1]),"\\.bam")))
file.path(bamPath,paste0(basename(bams[1]),"\\.bam"))
alignAndSort <- function(x,index,bamPath,nTH=4){
if(!file.exists(file.path(bamPath,paste0(basename(x),".bam")))){
align(index,x,output_file = file.path(bamPath,paste0(basename(x),".bam")),
nthreads=nTH,
unique=F,
type=1,
complexIndels=FALSE,
phredOffset=33)
}
if(!file.exists(file.path(bamPath,paste0("Sorted_",basename(x),".bam")))){
sortBam(file=file.path(bamPath,x),
destination = file.path(bamPath,paste0("Sorted_",basename(x),".bam")))
}
if(!file.exists(file.path(bamPath,paste0("Sorted_",basename(x),".bai")))){
indexBam(x)
}
}
res_Align <- bplapply(bams,function(x)alignAndSort(x,index,"/Users/tcarroll/Downloads/bigchip/bams//"))
alignAndSort <- function(x,index,bamPath,nTH=4){
if(!file.exists(file.path(bamPath,paste0(basename(x),".bam")))){
align(index,x,output_file = file.path(bamPath,paste0(basename(x),".bam")),
nthreads=nTH,
unique=F,
type=1,
complexIndels=FALSE,
phredOffset=33)
}
if(!file.exists(file.path(bamPath,paste0("Sorted_",basename(x),".bam")))){
sortBam(file=file.path(bamPath,basename(x)),
destination = file.path(bamPath,paste0("Sorted_",basename(x),".bam")))
}
if(!file.exists(file.path(bamPath,paste0("Sorted_",basename(x),".bai")))){
indexBam(file.path(bamPath,paste0("Sorted_",basename(x),".bai")))
}
}
res_Align <- bplapply(bams,function(x)alignAndSort(x,index,"/Users/tcarroll/Downloads/bigchip/bams//"))
alignAndSort <- function(x,index,bamPath,nTH=4){
if(!file.exists(file.path(bamPath,paste0(basename(x),".bam")))){
align(index,x,output_file = file.path(bamPath,paste0(basename(x),".bam")),
nthreads=nTH,
unique=F,
type=1,
complexIndels=FALSE,
phredOffset=33)
}
if(!file.exists(file.path(bamPath,paste0("Sorted_",basename(x),".bam")))){
sortBam(file=file.path(bamPath,paste0(basename(x),".bam")),
destination = file.path(bamPath,paste0("Sorted_",basename(x),".bam")))
}
if(!file.exists(file.path(bamPath,paste0("Sorted_",basename(x),".bai")))){
indexBam(file.path(bamPath,paste0("Sorted_",basename(x),".bai")))
}
}
res_Align <- bplapply(bams,function(x)alignAndSort(x,index,"/Users/tcarroll/Downloads/bigchip/bams//"))
res_Align <- lapply(bams,function(x)alignAndSort(x,index,"/Users/tcarroll/Downloads/bigchip/bams//"))
res_Align <- lapply(bams,function(x)alignAndSort(x,index,"/Users/tcarroll/Downloads/bigchip/bams//"))
BiocParallel::register(BiocParallel::MulticoreParam(workers = 2))
alignAndSort <- function(x,index,bamPath,nTH=4){
if(!file.exists(file.path(bamPath,paste0(basename(x),".bam")))){
align(index,x,output_file = file.path(bamPath,paste0(basename(x),".bam")),
nthreads=nTH,
unique=F,
type=1,
complexIndels=FALSE,
phredOffset=33)
}
if(!file.exists(file.path(bamPath,paste0("Sorted_",basename(x),".bam")))){
sortBam(file=file.path(bamPath,paste0(basename(x),".bam")),
destination = file.path(bamPath,paste0("Sorted_",basename(x))))
}
if(!file.exists(file.path(bamPath,paste0("Sorted_",basename(x),".bai")))){
indexBam(file.path(bamPath,paste0("Sorted_",basename(x),".bam")))
}
}
index = humanIndex
bamOut <- file.path("/Users/tcarroll/Downloads/bigchip/bams/",gsub("\\.fastq\\.gz$","\\.bam",basename(fastq)))
#BiocParallel::register(BiocParallel::SerialParam())
# res_Align <- bplapply(localFQs,function(x)alignAndSort(x,index,"/Users/tcarroll/Downloads/bigchip/bams/",))
bams <- gsub("\\.bam","",dir("~/Downloads/bigchip/bams/",full.names = T,pattern = "bam$"))
res_Align <- bplapply(bams,function(x)alignAndSort(x,index,"/Users/tcarroll/Downloads/bigchip/bams//"))
res_Align <- lapply(bams,function(x)alignAndSort(x,index,"/Users/tcarroll/Downloads/bigchip/bams//"))
bams <- gsub("\\.bam","",dir("~/Downloads/bigchip/bams/",full.names = T,pattern = "bam$"))
res_Align <- lapply(bams,function(x)alignAndSort(x,index,"/Users/tcarroll/Downloads/bigchip/bams//"))
bams
alignAndSort <- function(x,index,bamPath,nTH=4){
if(!file.exists(file.path(bamPath,paste0(basename(x),".bam")))){
align(index,x,output_file = file.path(bamPath,paste0(basename(x),".bam")),
nthreads=nTH,
unique=F,
type=1,
complexIndels=FALSE,
phredOffset=33)
}
if(!file.exists(file.path(bamPath,paste0("Sorted_",basename(x),".bam")))){
sortBam(file=file.path(bamPath,paste0(basename(x),".bam")),
destination = file.path(bamPath,paste0("Sorted_",basename(x))))
}
if(!file.exists(file.path(bamPath,paste0("Sorted_",basename(x),".bai")))){
indexBam(file.path(bamPath,paste0("Sorted_",basename(x),".bam")))
}
}
bams <- gsub("\\.bam","",dir("~/Downloads/bigchip/bams/",full.names = T,pattern = "bam$"))
res_Align <- lapply(bams,function(x)alignAndSort(x,index,"/Users/tcarroll/Downloads/bigchip/bams//"))
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("ChIPQC")
library(ChIPQC)
lapply(ChIPQCsample(bams,annotation = "hg19"))
lapply(ChIPQCsample(paste0(dirname(bams),paste0("Sorted_",basename(bams),"\\.bam"),annotation = "hg19"))
lapply(ChIPQCsample(paste0(dirname(bams),paste0("Sorted_",basename(bams),"\\.bam"),annotation = "hg19"))0
lapply(ChIPQCsample(file.path(dirname(bams),paste0("Sorted_",basename(bams),"\\.bam")),annotation = "hg19"))
lapply(ChIPQCsample(file.path(dirname(bams),paste0("Sorted_",basename(bams),".bam")),annotation = "hg19"))
lapply(file.path(dirname(bams),paste0("Sorted_",basename(bams),".bam")),function(x)ChIPQCsample(x,annotation = "hg19"))
bplapply(file.path(dirname(bams),paste0("Sorted_",basename(bams),".bam")),function(x)ChIPQCsample(x,annotation = "hg19"))
BiocParallel::register(BiocParallel::SerialParam())
bplapply(file.path(dirname(bams),paste0("Sorted_",basename(bams),".bam")),function(x)ChIPQCsample(x,annotation = "hg19"))
bplapply(seq(1:100000),rnorm)
BiocParallel::register(BiocParallel::MulticoreParam(workers = 2))
bplapply(seq(1:100000),rnorm)
bplapply(file.path(dirname(bams),paste0("Sorted_",basename(bams),".bam")),function(x)ChIPQCsample(x,annotation = "hg19",chromosomes = c("chr1","chr2","chr3","chr4")))
res_QC <- lapply(file.path(dirname(bams),paste0("Sorted_",basename(bams),".bam")),function(x)ChIPQCsample(x,annotation = "hg19",chromosomes = c("chr1","chr2","chr3","chr4")))
res_QC
res_QC[[1]]
res_QC[[1]]@CrossCoverage
res_QC[[1]]@CrossCoverage[1]
res_QC[[1]]@FlagAndTagCounts/res_QC[[1]]@CrossCoverage[1]
res_QC[[1]]@FlagAndTagCounts-res_QC[[1]]@CrossCoverage[1]
(res_QC[[1]]@FlagAndTagCounts-res_QC[[1]]@CrossCoverage[1])/res_QC[[1]]@FlagAndTagCounts
res_QC[[1]]@FlagAndTagCounts
res_QC[[1]]@CrossCoverage[1]
bams <- gsub("Sorted_|\\.bam","",dir("~/Downloads/bigchip/bams/",full.names = T,pattern = "bam$"))
peaksDir <- file.path("/Users/tcarroll/Downloads/bigchip/","Peaks")
macsExecutable <- "/usr/local/bin/macs2"
stdoutDir <- "/Users/tcarroll/Downloads/bigchip/stdout"
stderrDir <- "/Users/tcarroll/Downloads/bigchip/stderr"
TESTSAMPLE <- paste0(bams[8],".bam")
CONTROLSAMPLE <- paste0(bams[4],".bam")
OUTDIR <- file.path(peaksDir,"MACS2",paste0(basename(bams[8])))
NAME <- paste0(basename(bams[8]),"_withInput_",basename(bams[4]))
macsFiles <- dir(OUTDIR,full.names = T)
np_l <- grepl("\\.narrowPeak$",macsFiles)
tsv_l <- grepl("\\.xls$",macsFiles)
s_l <- grepl("summits\\.bed$",macsFiles)
npTb <- read.delim(macsFiles[np_l],sep="\t",h=F)
npGr <- GRanges(seqnames = npTb[,1],
IRanges(
start= npTb[,2],
end= npTb[,3]
),
score=npTb[,5],
strand="*",
signalValue=npTb[,7],
pValue=npTb[,8],
qValue=npTb[,9],
peak=npTb[,10]
)
names(npGr) <- npTb[,4]
sTb <- read.delim(macsFiles[s_l],sep="\t",h=F)
sGr <- GRanges(seqnames = sTb[,1],
IRanges(
start= sTb[,2],
end= sTb[,3]
),
peak=sTb[,5]
)
names(sGr) <- sTb[,4]
tsvTb <- read.delim(macsFiles[tsv_l],sep="\t",h=T,comment.char = "#")
tsvGr <- GRanges(seqnames = tsvTb[,1],
IRanges(
start= tsvTb[,2],
end= tsvTb[,3]
),
abs_summit=tsvTb[,5],
strand="*",
pileup=tsvTb[,6],
"minuslog10(pvalue)"=tsvTb[,7],
fold_enrichment=tsvTb[,8],
"minuslog10(qvalue)"=tsvTb[,9]
)
names(tsvGr) <- tsvTb[,10]
macsPeakCalls <- list(narrowPeak=npGr,xls=tsvGr,summits=sGr)
library(GenomicAlignments)
macsFiles <- dir(OUTDIR,full.names = T)
np_l <- grepl("\\.narrowPeak$",macsFiles)
tsv_l <- grepl("\\.xls$",macsFiles)
s_l <- grepl("summits\\.bed$",macsFiles)
npTb <- read.delim(macsFiles[np_l],sep="\t",h=F)
npGr <- GRanges(seqnames = npTb[,1],
IRanges(
start= npTb[,2],
end= npTb[,3]
),
score=npTb[,5],
strand="*",
signalValue=npTb[,7],
pValue=npTb[,8],
qValue=npTb[,9],
peak=npTb[,10]
)
names(npGr) <- npTb[,4]
sTb <- read.delim(macsFiles[s_l],sep="\t",h=F)
sGr <- GRanges(seqnames = sTb[,1],
IRanges(
start= sTb[,2],
end= sTb[,3]
),
peak=sTb[,5]
)
names(sGr) <- sTb[,4]
tsvTb <- read.delim(macsFiles[tsv_l],sep="\t",h=T,comment.char = "#")
tsvGr <- GRanges(seqnames = tsvTb[,1],
IRanges(
start= tsvTb[,2],
end= tsvTb[,3]
),
abs_summit=tsvTb[,5],
strand="*",
pileup=tsvTb[,6],
"minuslog10(pvalue)"=tsvTb[,7],
fold_enrichment=tsvTb[,8],
"minuslog10(qvalue)"=tsvTb[,9]
)
names(tsvGr) <- tsvTb[,10]
macsPeakCalls <- list(narrowPeak=npGr,xls=tsvGr,summits=sGr)
peaksDir <- file.path("/Users/tcarroll/Downloads/bigchip/","Peaks")
macsExecutable <- "/usr/local/bin/macs2"
stdoutDir <- "/Users/tcarroll/Downloads/bigchip/stdout"
stderrDir <- "/Users/tcarroll/Downloads/bigchip/stderr"
TESTSAMPLE <- paste0(bams[8],".bam")
CONTROLSAMPLE <- paste0(bams[4],".bam")
OUTDIR <- file.path(peaksDir,"MACS2",paste0(basename(bams[8])))
NAME <- paste0(basename(bams[8]),"_withInput_",basename(bams[4]))
#
# TESTSAMPLE <- paste0(bams[5],".bam")
# CONTROLSAMPLE <- paste0(bams[11],".bam")
# OUTDIR <- file.path(peaksDir,"MACS2",paste0(basename(bams[5])))
# NAME <- paste0(basename(bams[5]),"_withInput_",basename(bams[11]))
BROADT <- FALSE
ARGS <- c("callpeak",
paste0("-t"," ",TESTSAMPLE),
paste0("-c"," ",CONTROLSAMPLE),
paste0("--outdir"," ",OUTDIR),
paste0("--name"," ",NAME),
ifelse(BROADT,"--broad","")
)
system2(macsExecutable,
args =  ARGS,
stdout = file.path(stdoutDir,paste0("MACS_",NAME,".txt")),
stderr = file.path(stderrDir,paste0("MACS_",NAME,".txt"))
)
macsFiles <- dir(OUTDIR,full.names = T)
np_l <- grepl("\\.narrowPeak$",macsFiles)
tsv_l <- grepl("\\.xls$",macsFiles)
s_l <- grepl("summits\\.bed$",macsFiles)
npTb <- read.delim(macsFiles[np_l],sep="\t",h=F)
npGr <- GRanges(seqnames = npTb[,1],
IRanges(
start= npTb[,2],
end= npTb[,3]
),
score=npTb[,5],
strand="*",
signalValue=npTb[,7],
pValue=npTb[,8],
qValue=npTb[,9],
peak=npTb[,10]
)
names(npGr) <- npTb[,4]
sTb <- read.delim(macsFiles[s_l],sep="\t",h=F)
sGr <- GRanges(seqnames = sTb[,1],
IRanges(
start= sTb[,2],
end= sTb[,3]
),
peak=sTb[,5]
)
names(sGr) <- sTb[,4]
tsvTb <- read.delim(macsFiles[tsv_l],sep="\t",h=T,comment.char = "#")
tsvGr <- GRanges(seqnames = tsvTb[,1],
IRanges(
start= tsvTb[,2],
end= tsvTb[,3]
),
abs_summit=tsvTb[,5],
strand="*",
pileup=tsvTb[,6],
"minuslog10(pvalue)"=tsvTb[,7],
fold_enrichment=tsvTb[,8],
"minuslog10(qvalue)"=tsvTb[,9]
)
names(tsvGr) <- tsvTb[,10]
macsPeakCalls <- list(narrowPeak=npGr,xls=tsvGr,summits=sGr)
source("https://bioconductor.org/biocLite.R")
biocLite("BSgenome.Hsapiens.UCSC.hg19")
source("https://bioconductor.org/biocLite.R")
biocLite("BSgenome.Hsapiens.UCSC.hg19")
library(BSgenome.Hsapiens.UCSC.hg19)
BSgenome.Hsapiens.UCSC.hg19
BSgenome.Hsapiens.UCSC.hg19[[1]]
writeXStringSet(BSgenome.Hsapiens.UCSC.hg19[[22]],filepath = "~/Downloads/bigchip/Chr22.fa")
BSgenome.Hsapiens.UCSC.hg19[1]
DNAStringSet(BSgenome.Hsapiens.UCSC.hg19[[1]])
writeXStringSet(DNAStringSet(BSgenome.Hsapiens.UCSC.hg19[[22]]),filepath = "~/Downloads/bigchip/Chr22.fa")
writeXStringSet(DNAStringSet(BSgenome.Hsapiens.UCSC.hg19[[1]]),filepath = "~/Downloads/bigchip/Chr22.fa")
writeXStringSet(DNAStringSet(BSgenome.Hsapiens.UCSC.hg19[[1]],BSgenome.Hsapiens.UCSC.hg19[[22]]),filepath = "~/Downloads/bigchip/Chr22.fa")
writeXStringSet(DNAStringSet(list(BSgenome.Hsapiens.UCSC.hg19[[1]],BSgenome.Hsapiens.UCSC.hg19[[22]])),filepath = "~/Downloads/bigchip/Chr22.fa")
?writeXStringSet
writeXStringSet(DNAStringSet(list(BSgenome.Hsapiens.UCSC.hg19[[1]],BSgenome.Hsapiens.UCSC.hg19[[22]])),filepath = "~/Downloads/bigchip/Chr22.fa",compress = T)
writeXStringSet(DNAStringSet(list(BSgenome.Hsapiens.UCSC.hg19[[1]],BSgenome.Hsapiens.UCSC.hg19[[22]])),filepath = "~/Downloads/bigchip/Chr1and22.fa.gz",compress = T)
